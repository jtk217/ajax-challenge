"use strict";
/*
    app.js, main Angular application script
    define your module and controllers here
*/

var commentsUrl = 'https://api.parse.com/1/classes/comments';

angular.module('ProductRatingApp', ['ui.bootstrap'])
    .config(function($httpProvider) {
        //Parse required two extra headers sent with every HTTP request: X-Parse-Application-Id, X-Parse-REST-API-Key
        //the first needs to be set to your application's ID value
        //the second needs to be set to your application's REST API key
        //both of these are generated by Parse when you create your application via their web site
        //the following lines will add these as default headers so that they are sent with every
        //HTTP request we make in this application
        $httpProvider.defaults.headers.common['X-Parse-Application-Id'] = 'swedCGBpA2FCYltmXbgJD6OUCGVknxuNlXGlZRPK';
        $httpProvider.defaults.headers.common['X-Parse-REST-API-Key'] = 'DxfbU6paTpExhnjyQHXIABWybhhR2DV8wyg0nEnp';
    })
    .controller('CommentsController', function($scope, $http) {
        $scope.refreshComments = function() {
            $scope.loading = true;
            $http.get(commentsUrl)
                .success(function(data) {
                    $scope.comments = data.results;
                    $scope.sortComments();
                })
                .error(function(err) {
                    $scope.errorMessage = err;
                })
                .finally(function() {
                    $scope.loading = false;
                });
        };

        $scope.refreshComments();

        $scope.newComment = {votes: 0, name: '', title: '', body: ''};

        $scope.addComment = function() {
            if ($scope.newComment.title.trim().length > 0 && $scope.newComment.name.trim().length > 0 && $scope.newComment.body.trim().length > 0) {
                $scope.loading = true;
                $scope.inserting = true;
                $http.post(commentsUrl, $scope.newComment)
                    .success(function (responseData) {
                        $('#invalid').hide();
                        $scope.newComment.objectId = responseData.objectId;
                        $scope.comments.push($scope.newComment);
                        $scope.sortComments();
                        $scope.newComment = {votes: 0, name: '', title: '', body: ''};
                    })
                    .error(function (err) {
                        $scope.errorMessage = err;
                    })
                    .finally(function () {
                        $scope.loading = false;
                        $scope.inserting = false;
                    });
            }
            else {
                console.log('not all filled');
                $("#invalid").css("display", "inline-block");;
            }
        };

        $scope.updateComment = function(comment) {
            $http.put(commentsUrl + '/' + comment.objectId, comment)
                .success(function() {
                    //show feedback?
                })
                .error(function(err) {
                    $scope.errorMessage = err;
                })
        };

        $scope.incrementVotes = function(comment, amount) {
            if (!(comment.votes == 0 && amount == -1)) {
                $http.put(commentsUrl + '/' + comment.objectId, {
                    votes: {
                        __op: 'Increment',
                        amount: amount
                    }
                })
                    .success(function (responseData) {
                        console.log(responseData);
                        comment.votes = responseData.votes
                    })
                    .error(function (err) {
                        console.log(err);
                    })
                    .finally(function () {
                        $scope.updating = false;
                    })
            }
        };

        $scope.sortComments = function() {
            $scope.comments = $scope.comments.sort(function(a,b) { return b.votes - a.votes})
        };

        $scope.removeComment = function(comment) {
            $scope.loading = true;
            $http.delete(commentsUrl + '/' + comment.objectId)
                .success(function(data) {
                    $scope.refreshComments();
                })
                .error(function(err) {
                    $scope.errorMessage = err;
                })
                .finally(function() {
                    $scope.loading = false;
                });
        };

        $scope.zeroComments = function() {
            console.log($scope.comments);
            return $scope.comments == 0;
        };
    });